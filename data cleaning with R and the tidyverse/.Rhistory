boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remiander(11,5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[-1]},c(8,4,0))
evaluate(function(x){x[x(length)]},c(8,4,0))
evaluate(function(x){x[length(x))]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram("hello")
submit()
submit()
submit()
submit()
submit()
kdsjv;ls
submit()
submit()
# Let's explore how to "unpack" arguments from an ellipses when you use the
# ellipses as an argument in a function. Below I have an example function that
# is supposed to add two explicitly named arguments called alpha and beta.
#
# add_alpha_and_beta <- function(...){
args <- list(...)
alpha <- args[["alpha"]]
beta  <- args[["beta"]]
alpha + beta
}
#
# Have you ever played Mad Libs before? The function below will construct a
# sentence from parts of speech that you provide as arguments. We'll write most
# of the function, but you'll need to unpack the appropriate arguments from the
# ellipses.
mad_libs <- function(...){
args<-list(...)
place<-args[["place"]]
adjective<-args[["adjective"]]
noun<-args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
args<-list(...)
place<-args[["place"]]
adjective<-args[["adjective"]]
noun<-args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
"I" %p% "love" %p% "R!"
mad_libs <- function(...){
args<-list(...)
place<-args[["place"]]
adjective<-args[["adjective"]]
noun<-args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs("whitehouse","anxious","alien")
mad_libs(place="whitehouse",adjective="anxious",noun="alien")
swirl()
library(swirl)
swril
swirl
swril()
swirl()
from swirl install.packages("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
skip()
skip()
skip()
rm("mydf")
cran
group_by(cran,package)
group_by(cran,package)
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count>679.56)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
View(top_counts)
View(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-arrange(pack_sum,unique>465)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
??chain
submit()
View(result3)
submit()
submit()
submit()
skip()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
View(students)
students2
res<-gather(students2,key="sex_class",value = "count",-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
?gather
submit()
?spread
skip()
library(readr)
?parse_number()
?parse_number
parse_number("class5"")
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
?select
submit()
submit()
library(swirl)
stall_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
qplot(displ~hwy,data=mpg,geom=c("point","smooth"),facet=.~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facet=.~drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets =.~drv)
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm", se=FALESE)
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times)
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g<-ggplot(test,aes(x=myx,y=myy))
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(displ,hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets=.~cut)+geom_smooth(method="lm")
g<-ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
diamonds$car2
g<-ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geo_smooth(method="lm",size=3,color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(ggplot)
qplot(Wind,Ozone,data=airqualty,facets=.~factor(Month))
qplot(Wind,Ozone,data=airqualty,facets=.~factor(Month))
library(datasets)
data(airquality)
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
airquality=transform(airquality,Month=factor(Month))
airquality=transform(airquality,Month=factor(Month))
airquality
str(airquality)
qplot(Wind,Ozone,data=airquality,facets=.~Month)
library(swirl)
swirl()
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
pl<-colorRampPalette(c("red","blue"))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3<-colorRampPalette(c("blue","green"),alpha=0.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,0.5,0.5))
plot(x,y,pch=19,col=rgb(0,0.5,0.5,0.3))
col<-brewer.pal(3,"BuGn")
colS<-brewer.pal(3,"BuGn")
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
library(swirl)
swirl()
dist(dataFrame)
hc<-hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
abline(h=0.05)
12
abline(h=0.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
install.packages("tidyverse")
setwd("~/GitHub/posts/data cleaning with R and the tidyverse")
data<-read.csv("telecom.csv")
library(tidyverse)
glimpse(data)
View(data)
View(data)
filter(data,churn == 'yes')
filter(data,Churn == 'yes')
library(dplyr)
filter(data,Churn == 'yes')
tbl(data)
tbl_df(data)
?tbl_df
filter(data,Churn == 'yes')
is.na(data$MonthlyCharges)
data$MonthlyCharges
anyNA(data$MonthlyCharges)
is.nan(data$MonthlyCharges)
?summarize
data %>%
distinct(MonthlyCharges) %>%
summarize(sum)
data %>%
summarize(n=n_distinct(MonthlyCharges))
data
library(tidyverse)
glimpse(data)
filter(data,Churn == 'yes')
is.na(data$MonthlyCharges)
data$MonthlyCharges
anyNA(data$MonthlyCharges)
is.nan(data$MonthlyCharges)
data %>%
summarize(n=n_distinct(MonthlyCharges))
data %>%
summarize(n.na=colSums(is.na(MonthlyCharges:Churn)))
data %>%
summarize(n.na=sum(is.na(MonthlyCharges)))
data %>%
summarize(na.count=sum(is.na(MonthlyCharges)),
unique.count=n_distinct(MonthlyCharges),
median=median(MonthlyCharges))
data %>%
summarize(na.count=sum(is.na(MonthlyCharges)),
unique.count=n_distinct(MonthlyCharges),
median=median(MonthlyCharges,na.rm=T))
?replace
#replace the missing value with median of MonthlyCharges
data %>%
mutate(MonthlyCharges=replace(MonthlyCharges,
list= is.na(MonthlyCharges),
values=median(MonthlyCharges,na.rm=TRUE)))
data
#replace the missing value with median of MonthlyCharges
data.nona<-data %>%
mutate(MonthlyCharges=replace(MonthlyCharges,
list= is.na(MonthlyCharges),
values=median(MonthlyCharges,na.rm=TRUE)))
#replace the missing value with median of MonthlyCharges
data<-data %>%
mutate(MonthlyCharges=replace(MonthlyCharges,
list= is.na(MonthlyCharges),
values=median(MonthlyCharges,na.rm=TRUE)))
data
is.na(data$TotalCharges)
data$TotalCharges
data$TotalCharges<-as.numeric(data$TotalCharges)
data$TotalCharges
data
data<-read.csv("telecom.csv")
glimpse(data)
data$TotalCharges<-as.numeric(data$TotalCharges)
data
data<-read.csv("telecom.csv")
data
data$TotalCharges<-as.numeric(data$TotalCharges)
data
?as.numeric
data<-read.csv("telecom.csv")
#replace the missing value with median of MonthlyCharges
data<-data %>%
mutate(MonthlyCharges=replace(MonthlyCharges,
list= is.na(MonthlyCharges),
values=median(MonthlyCharges,na.rm=TRUE)))
## look for na in TotalCharges
data$TotalCharges<-is.na(data$TotalCharges)
data
data<-read.csv("telecom.csv")
data<-data %>%
mutate(MonthlyCharges=replace(MonthlyCharges,
list= is.na(MonthlyCharges),
values=median(MonthlyCharges,na.rm=TRUE)))
is.na(data$TotalCharges)
glimpse(data)
data<-read.csv("telecom.csv",stringsAsFactors = FALSE)
glimpse(data)
data %>%
summarize(na.count=sum(is.na(MonthlyCharges)))
data<-data %>%
mutate(MonthlyCharges=replace(MonthlyCharges,
list= is.na(MonthlyCharges),
values=median(MonthlyCharges,na.rm=TRUE)))
is.na(data$TotalCharges)
data
data %>%
summarize(count=sum(is.na(TotalCarges)))
data %>%
summarize(count=sum(is.na(TotalCharges)))
data<-data %>%
mutate(TotalCharges=replace(TotalCharges,
list = TotalCharges == 'na',
values = NA)) %>%
mutate(TotalCharges=replace(TotalCharges,
list = TotalCharges == 'N/A',
values = NA))
data
is.na(data$TotalCharges)
data$TotalCharges<-as.numeric(data$TotalCharges)
data
glimse(TotalCharges)
glimpse(data$TotalCharges)
data %>%
mutate(TotalCharges = replace(TotalCharges,
list = is.na(TotalCharges),
values = median(TotalCharges, na.rm = TRUE)))
data<-data %>%
mutate(TotalCharges = replace(TotalCharges,
list = is.na(TotalCharges),
values = median(TotalCharges, na.rm = TRUE)))
is.na(data$PaymentMethod)
glimpse(data$PaymentMethod)
is.na(data$PaymentMethod)
?grepl
value = 'unavailable')
values = 'unavailable')
data<-data %>%
mutate(PaymentMethod = replace(PaymentMethod,
list = grepl('--| ', PaymentMethod),
values = 'unavailable'))
data
data<-read.csv("telecom.csv",stringsAsFactors = FALSE)
data<-data %>%
data<-data %>%
mutate(PaymentMethod = replace(PaymentMethod,
list = grepl('--'|'', PaymentMethod),
values = 'unavailable'))
grepl('--| ', PaymentMethod)
grepl('--| ', data$PaymentMethod)
data<-read.csv("telecom.csv",stringsAsFactors = FALSE)
data<-data %>%
mutate(PaymentMethod = replace(PaymentMethod,
list = grepl('--& ', data$PaymentMethod),
values = 'unavailable'))
data
data<-data %>%
mutate(PaymentMethod = replace(PaymentMethod,
list = grepl('--| ', data$PaymentMethod),
values = 'unavailable'))
data
data<-read.csv("telecom.csv",stringsAsFactors = FALSE)
data<-data %>%
mutate(PaymentMethod = replace(PaymentMethod,
list = PaymentMethod %in% c('--',''),
values = 'unavailable'))
data
library(tidyverse)
library(dplyr)
data<-read.csv("telecom.csv",stringsAsFactors = FALSE)
## look at the structure of the data
glimpse(data)
## look for na in MonthlyCharges
is.na(data$MonthlyCharges)
anyNA(data$MonthlyCharges)
is.nan(data$MonthlyCharges)
## summarize the number of nas in MonthlyCharges
data %>%
summarize(na.count=sum(is.na(MonthlyCharges)))
#replace the missing value with median of MonthlyCharges
data<-data %>%
mutate(MonthlyCharges=replace(MonthlyCharges,
list= is.na(MonthlyCharges),
values=median(MonthlyCharges,na.rm=TRUE)))
## look for na in TotalCharges (character vector), R does not recognize na and N/A as missing values
## the easiest way is to coerce TotalCharges to numeric vector first, so NAs will be correctly detected
## but this might not always be a good idea, because you might miss other anomlies
is.na(data$TotalCharges)
data %>%
summarize(count=sum(is.na(TotalCharges)))
## replace not correct missing value to NA
data<-data %>%
mutate(TotalCharges=replace(TotalCharges,
list = TotalCharges == 'na',
values = NA)) %>%
mutate(TotalCharges=replace(TotalCharges,
list = TotalCharges == 'N/A',
values = NA))
## now take another look
is.na(data$TotalCharges)
data$TotalCharges<-as.numeric(data$TotalCharges)
glimpse(data$TotalCharges)
## replace missing values with median
data<-data %>%
mutate(TotalCharges = replace(TotalCharges,
list = is.na(TotalCharges),
values = median(TotalCharges, na.rm = TRUE)))
## now look for na in Payment Method
is.na(data$PaymentMethod)
glimpse(data$PaymentMethod)
## replace all missing data to be unavialble
data<-data %>%
mutate(PaymentMethod = replace(PaymentMethod,
list = PaymentMethod %in% c('--',''),
values = 'unavailable'))
data
colSums(is.na(data))
all(colSums(is.na(data)) == 0)
